
*. 如何在仓库中建立文件夹?
  *. 在命令行方式下, 用 MD 命令建立文件夹. 在当前目录下, 一次建立一个. 不能一次串行地建立两层.
  *. 在 windows 方式下, 在资源管理器中, 在一个目录上, 右击鼠标, 选择"新建", 再选择"文件夹". 就可以建立一个空的文件夹.
  *. 在 GitHub 网站上你自己的仓库中, 文件夹不是"独立"的对象, 它依附于文件而存在. 意思是, 文件在, 它所寄宿的目录就在, 当
     一个目录中的所有文件都消失后, 文件夹自然就消失了, 不用特意删除.
  *. 在网站仓库中创建一个文件时, 录入一个标识串, 再录入一个正斜线("/"), 系统立即认为你录入的是文件夹名, 再添加一个录入框
     , 让你录入文件名. 当你录入完标识串再录入"/"时, 又认为是文件夹, 如此反复, 可录入一串文件夹名. 最后录入文件名确认后, 
     就建立起了一串嵌套的文件夹, 一条路径. 在最后(里层)的文件夹中, 是新建立的文件. 即, 文件夹是依文件而建立的.
  *. 显示时, 对于只有一个子文件夹的文件夹, 将它们串行起来显示, 直到有文件, 或有多个子文件夹为止.
  *. 在显示一个目录中的文件时, 只显示当前目录下的子文件夹和文件. 而上述那种只有一个子文件夹的子文件夹, 将它们串在一起显
     示. 可以做一个有意义的理解, 显示的不是文件夹, 显示的是"路径", 它指向有文件存在的下一层.
*. 删除一个 repository.
  *. 选择一个仓库, 选择 Settings 标签. 拉到最后, 就看到删除的功能了. (有时, 要录入密码确认)
*. 删除文件.
  *. 选择一个文件. 在编辑的"笔"图标的后面, 有一个垃圾筒图标, 用于删除. 删除文件后, 如果它所在的路径空了, 也同时删除路径.
*. GitHub 的客户端桌面管理程序.
  *. 在 https://desktop.github.com/ 上有一个下载桌面管理程序 GitHubDesktopSetup.exe 的安装程序, 安装后产生
     GitHubDesktop.exe 程序. 它是一个桌面程序, 有一个自己的界面. 不象 SVN, 利用下拉菜单来使用功能.
     
2019-10-04
*. 在本地, 移动库的方法.
  *. 先克隆一个库到目标目录, 然后删除原库. 对于远程的库来说, 是无知的.
  
2019-10-07
 *. 一个账号下的所有仓库, 都以自己注册的账号为根节点.
 *. 点击左上角的"猫"的图标, 就回到最初的页面. 左边是各仓库的列表, 有一个"New"按钮, 可以创建新的仓库.
 *. 仓库列表上面的过滤, 挺有意思. 录入"0"及有些字符, 过滤不起作用. 此过滤是模糊方式的.
 
 *. 点击一个仓库, 就进入了以这个仓库为单位的页面. 它有一个文件列表, 如果有子目录文件, 只列到一层. 子目录可以层层递进, 但
    一次只能显示一条路径下的文件. 再点击一个文件, 就进入了编辑, 操纵这个文件的页面. 
    
2019-10-08
 *. 下载 Git-2.23.0-64-bit.exe 程序. 安装后, 可用命令行的方式在本地使用 git 的功能.
   *. git-bash.exe 是 Linux 风格的界面. 提示符是 "$".
   *. git-cmd.exe 是 windows 命令行风格的界面, 提示符是"路径>".
   *. 在命令行界面上, 即可以用 git 命令, 也可以用 dos 命令.
 *. git 的概念. 对于一个仓库, 无论在网站上, 还是本地, 都是在".git"目录下. 这就是它的全部. 本地的目录被隐藏. 它位于一个工
    作目录下. 这个目录可以是项目的根目录. 
 *. 仓库分为三个区, 开始是编辑区, 中间是暂存区, 最后是提交区. 提交后, 就向网上推送.
 *. 使用的步骤为: 建立一个项目的目录, 进入其中, 用 git init 初始化. 就是建立 ".git" 目录.
   *. 考入文件后, 用 git add <file> 把文件加入缓冲区.
   *. 用 git commit 提交, 最后用 git push 推送. 总的意图是将本地缓冲区中的东西推向网络.
 *. 管道. "|". 前一个命令的输出, 是后一个命令的输入.
 *. ">" 将前面显示的内容变成文件, 后面是文件名.
 *. 数据对象和树对象. 数据对象对应一个文件, 树对象对应一个目录. 树对象中是多条的树对象记录, 记录文件, 子目录的名称和指针.
 *. 仓库是一个概念. 它的存储形式是一个目录. 远程的服务器只有一份儿. 但所有的工作站都是副本.
   #. $ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux 克隆到本地, 换一个目录名.
 *. 引用(references, 或缩写为 refs). 
 
2019-10-11
 *. 在网站上建立一个分支. 在本机上第一次 fetch 时, 先下载分支列表. 再选择所要的分支. 这时, 要在网站上产生一个
    pull request 才行. 选择一个分支下载后, 工作目录中的文件自动对齐.
 *. 数据对象. 对应文件.
 *. 树对象. 下面是多条树对象记录. 记录指向数据对象和子树对象, 还有它们的名字.
 *. 提交对象, 指向顶层树对象和父提交对象. 这样就构成一个完整的链条.
 