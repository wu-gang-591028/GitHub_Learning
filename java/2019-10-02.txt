注解:
1. 就是一个标记. 以@开头的特殊形式. 而它之所以起作用, 是有一个主体识别它, 解释它, 按定义的意思进行处理.
2. 注解是针对一个程序对象的. 一个类, 一个方法, 一个属性, ...

3. 「java.lang.annotation.Annotation」这是注解的根. 一切都源于它. 它是一个接口.
4. ElementType.METHOD 接口面对的对象有类型. 就是用这个来表示.
5. 接口的名称是最顶层的分类, 然后就是用各种参数来分支不同的情况.

6. @Target(ElementType.METHOD) 指出对象是什么类型.
7. @Retention(RetentionPolicy.SOURCE) 指出这个注解持续到什么时候.
8. 一个对象上, 可以施加多个注解. 
9. 定义一个注解时, 可以用其它已经定义的注解来补充它.
10. public @interface Override {...} 是 public interface Override extends Annotation{...} 的简写.
11. 『元注解』是用于修饰注解的注解，通常用在注解的定义上，例如：
    @Target(ElementType.METHOD)
    @Retention(RetentionPolicy.SOURCE)
    public @interface Override {...}
12. JAVA 中有以下几个『元注解』：
    @Target：注解的作用目标
    @Retention：注解的生命周期
    @Documented：注解是否应当被包含在 JavaDoc 文档中
    @Inherited：是否允许子类继承该注解
https://www.cnblogs.com/yangming1996/p/9295168.html

 注解的本质就是一个继承了 Annotation 接口的接口。
 *. 一类注解是编译器知道的, 编译器可以执行相应的动作. 一类是不知道的, 编译器只是将信息记入字节码.
 *. 注解的元素. 就是它的参数. 没有元素的注解, 称为标记注解. 
 *. 解析注解. 通过反射, 得到注解的信息, 然后进行处理.
    package com.annotation.test;

    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Method;

    public class ParseZyrAnnotation {
        public static void main(String[] args) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
            //获取字节码对象
            Class myclass = AddZyrAnnotation.class;
            Method method1 = myclass.getMethod("show", String.class);
            Method method2 = myclass.getMethod("print", String.class);
            //获取方法上面的注解
            ZyrAnnotation annotation1 = method1.getAnnotation(ZyrAnnotation.class);
            ZyrAnnotation annotation2 = method2.getAnnotation(ZyrAnnotation.class);
            //获取注解属性值并根据业务处理数据
            //激活方法，也就是让方法执行
            System.out.println(annotation1.name()+"\t"+annotation1.value()+"\t"+annotation1.desc());
            method1.invoke(new AddZyrAnnotation(), "输出：zyr");
            System.out.println(annotation2.name()+"\t"+annotation2.value()+"\t"+annotation2.desc());
            method2.invoke(new AddZyrAnnotation(), "输出：lsx");
        }
    }
 https://www.cnblogs.com/zyrblog/p/9946009.html
